
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())

  reportedBreakdowns  Breakdown[] @relation("ReportedBy")
  resolvedRFUs        RFUReport[] @relation("ResolvedBy")
  createdUnits        Unit[]      @relation("CreatedBy")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique

  units Unit[]
}

model Unit {
  id          String      @id @default(uuid())
  name        String
  serialNumber String?
  location    String
  createdAt   DateTime    @default(now())

  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdBy   User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String

  breakdowns Breakdown[]
  histories  UnitHistory[]
}

model Breakdown {
  id             String             @id @default(uuid())
  description    String
  breakdownTime  DateTime
  workingHours   Float
  status         BreakdownStatus    @default(pending)
  createdAt      DateTime           @default(now())

  unit        Unit                 @relation(fields: [unitId], references: [id])
  unitId      String

  reportedBy  User                 @relation("ReportedBy", fields: [reportedById], references: [id])
  reportedById String

  components  BreakdownComponent[]
  rfuReport   RFUReport?
}

model BreakdownComponent {
  id           String     @id @default(uuid())
  component    String
  subcomponent String

  breakdown   Breakdown  @relation(fields: [breakdownId], references: [id])
  breakdownId String
}

model RFUReport {
  id          String    @id @default(uuid())
  solution    String
  resolvedAt  DateTime  @default(now())

  breakdown   Breakdown @relation(fields: [breakdownId], references: [id])
  breakdownId String    @unique

  resolvedBy  User      @relation("ResolvedBy", fields: [resolvedById], references: [id])
  resolvedById String
}

model UnitHistory {
  id          String   @id @default(uuid())
  logType     String
  referenceId String
  message     String
  createdAt   DateTime @default(now())

  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
}

enum Role {
  super_admin
  admin_heavy
  admin_elec
  pengawas
  mekanik
}

enum BreakdownStatus {
  pending
  in_progress
  rfu
}
