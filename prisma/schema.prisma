generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                 String      @id @default(uuid())
  name               String
  email              String      @unique
  password           String
  role               Role
  createdAt          DateTime    @default(now())
  department         String?
  avatar             String?
  status             String?
  lastActive         DateTime?
  tasksCompleted     Int?
  joinDate           DateTime?
  reportedBreakdowns Breakdown[] @relation("ReportedBy")
  resolvedRFUs       RFUReport[] @relation("ResolvedBy")
  assignedUnits      Unit[]      @relation("AssignedTo")
  createdUnits       Unit[]      @relation("CreatedBy")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  units Unit[]
}

model Unit {
  id              String        @id @default(uuid())
  assetTag        String        @unique
  name            String
  description     String?
  categoryId      Int
  status          String        @default("operational")
  condition       String?
  serialNumber    String?
  location        String
  department      String?
  manufacturer    String?
  installDate     DateTime?
  warrantyExpiry  DateTime?
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  assetValue      Float?
  utilizationRate Int?
  createdAt       DateTime      @default(now())
  createdById     String
  assignedToId    String?
  breakdowns      Breakdown[]
  assignedTo      User?         @relation("AssignedTo", fields: [assignedToId], references: [id])
  category        Category      @relation(fields: [categoryId], references: [id])
  createdBy       User          @relation("CreatedBy", fields: [createdById], references: [id])
  histories       UnitHistory[]
}

model Breakdown {
  id            String               @id @default(uuid())
  description   String
  breakdownTime DateTime
  workingHours  Float
  status        BreakdownStatus      @default(pending)
  createdAt     DateTime             @default(now())
  unitId        String
  reportedById  String
  reportedBy    User                 @relation("ReportedBy", fields: [reportedById], references: [id])
  unit          Unit                 @relation(fields: [unitId], references: [id])
  components    BreakdownComponent[]
  rfuReport     RFUReport?
}

model BreakdownComponent {
  id           String    @id @default(uuid())
  component    String
  subcomponent String
  breakdownId  String
  breakdown    Breakdown @relation(fields: [breakdownId], references: [id])
}

model RFUReport {
  id           String    @id @default(uuid())
  solution     String
  resolvedAt   DateTime  @default(now())
  breakdownId  String    @unique
  resolvedById String
  breakdown    Breakdown @relation(fields: [breakdownId], references: [id])
  resolvedBy   User      @relation("ResolvedBy", fields: [resolvedById], references: [id])
}

model UnitHistory {
  id          String   @id @default(uuid())
  logType     String
  referenceId String
  message     String
  createdAt   DateTime @default(now())
  unitId      String
  unit        Unit     @relation(fields: [unitId], references: [id])
}

enum Role {
  super_admin
  admin_heavy
  admin_elec
  pengawas
  mekanik
}

enum BreakdownStatus {
  pending
  in_progress
  rfu
}
